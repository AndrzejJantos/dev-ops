# Multi-stage Next.js Production Dockerfile
# Optimized for minimal size and security

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* yarn.lock* pnpm-lock.yaml* ./

# Install ALL dependencies (needed for build, will be pruned later)
# Use legacy-peer-deps to handle peer dependency conflicts
RUN if [ -f package-lock.json ]; then \
        npm ci --legacy-peer-deps; \
    elif [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile; \
    elif [ -f pnpm-lock.yaml ]; then \
        corepack enable pnpm && pnpm install --frozen-lockfile; \
    else \
        npm install --legacy-peer-deps; \
    fi

# Stage 2: Builder
FROM node:20-alpine AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Copy environment file for build
COPY .env.production .env.production

# Build Next.js application
RUN npm run build

# Check if standalone output exists
RUN if [ ! -d .next/standalone ]; then \
        echo "ERROR: .next/standalone directory not found!"; \
        echo ""; \
        echo "Please add to your next.config.js:"; \
        echo ""; \
        echo "  module.exports = {"; \
        echo "    output: 'standalone',"; \
        echo "    // ... your other config"; \
        echo "  }"; \
        echo ""; \
        echo "Then commit, push and redeploy."; \
        exit 1; \
    fi

# Stage 3: Runner (Production)
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files from builder
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Remove .env files from image (will be provided via docker run --env-file)
RUN rm -f .env .env.production .env.local .env.*.local

# Set ownership
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

CMD ["node", "server.js"]
